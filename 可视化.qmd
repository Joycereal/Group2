---
title: "Untitled"
format: html
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(tidyverse)
library(shiny)
library(ggplot2)
library(shiny)
library(dbscan)
library(ggplot2)
library(readr)
library(plotly) 
```

#第一个可视化 

```{r}
# 加载文件
data <- read_csv("final_combined_cleaned_ID_data2.csv")
```

#第二个可视化

```{r}
data_final <- read.csv("final_combined_cleaned_ID_data2.csv", stringsAsFactors = FALSE)
data_final <- data_final %>%
  filter(!is.na(gene_symbol), !is.na(analysis_id), !is.na(pvalue)) %>% 
  distinct()
```

#第三个可视化

```{r}
# 加载数据
data2 <- read_csv("123.csv")

# 查看前几行
head(data2)

# 检查列名
colnames(data2)

```

```{r}
# 数据标准化
scores <- scale(data2$phenodigm_score)
head(scores)

```

```{r}
# 计算距离矩阵
dist_matrix <- dist(scores, method = "euclidean")

# 执行层次聚类
hc <- hclust(dist_matrix, method = "ward.D2")

# 将分组结果添加到数据中
data2$cluster <- cutree(hc, k = 2)  # 假设分成2组
head(data2$cluster)

```

```{r}
# 设置随机种子并执行 K-means 聚类
set.seed(123)
kmeans_result <- kmeans(scores, centers = 3, nstart = 25)

# 将聚类结果添加到数据框中
data2$kmeans_cluster <- as.factor(kmeans_result$cluster)
head(data2$kmeans_cluster)

```

```{r}
# 定义 UI 界面
ui <- navbarPage(
  "Interactive Phenotype Dashboard",
  
  # 第一个标签页：Significant Phenotypes Dot Plot
  tabPanel(
    "Significant Phenotypes Dot Plot",
    fluidPage(
      titlePanel("Significant Phenotypes Dot Plot"),
      sidebarLayout(
        sidebarPanel(
          selectizeInput("gene_id", "Select Gene Symbol:", 
                         choices = unique(data$gene_symbol), 
                         options = list(placeholder = "Search for a gene symbol", 
                                        maxOptions = 1000)),  # 支持搜索
          sliderInput("top_n", "Number of Top Phenotypes to Display:", 
                      min = 5, max = 50, value = 10, step = 5)
        ),
        mainPanel(
          plotOutput("dot_plot")  # 点图展示
        )
      )
    )
  ),
  
  # 第二个标签页：Statistical scores of all knockout mice
  tabPanel(
    "Phenotype Scores Across Knockout Mice",
    fluidPage(
      titlePanel("Statistical Scores of All Knockout Mice"),
      sidebarLayout(
        sidebarPanel(
          selectInput("gene_symbol", "Select Gene Symbol:", 
                      choices = unique(data_final$gene_symbol)), # 基因选择
          selectInput("mouse_life_stage", "Select Mouse Life Stage:", 
                      choices = unique(data_final$mouse_life_stage)), # 生命阶段选择
          selectInput("mouse_strain", "Select Mouse Strain:", 
                      choices = unique(data_final$mouse_strain)), # 小鼠品系选择
          radioButtons("display_mode", "Display Mode:", 
                       choices = c("Show All Records" = "all", "Show Top N Records" = "top_n"), 
                       selected = "all"), # 用户选择显示模式
          conditionalPanel(
            condition = "input.display_mode == 'top_n'", # 当选择 "Show Top N Records" 时显示滑动条
            sliderInput("top_n_bar", "Display Top N Records:", 
                        min = 1, max = 50, value = 50) # 调节显示条数
          )
        ),
        mainPanel(
          plotOutput("bar_plot") # 仅显示柱状图
        )
      )
    )
  ),
  
  # 第三个标签页：DBSCAN Clustering with Phenodigm Scores
  tabPanel(
    "DBSCAN Clustering",
    fluidPage(
      titlePanel("DBSCAN Clustering with Phenodigm Scores"),
      sidebarLayout(
        sidebarPanel(
          fileInput("file1", "Choose CSV File", accept = ".csv"),
          numericInput("eps", "eps (Neighborhood radius):", value = 0.5, min = 0.1, step = 0.1),
          numericInput("minPts", "minPts (Minimum points per cluster):", value = 5, min = 1),
          actionButton("run_cluster", "Run DBSCAN")
        ),
        mainPanel(
          plotlyOutput("cluster_plot"),  # 使用 plotlyOutput 来渲染图形
          tableOutput("cluster_table")
        )
      )
    )
  )
)

# 定义 Server 逻辑
server <- function(input, output, session) {
  
  # 第一个标签页逻辑：点图
  plot_data <- reactive({
    req(input$gene_id, input$top_n)
    data %>%
      filter(gene_symbol == input$gene_id) %>%
      mutate(log_pvalue = -log10(pvalue)) %>%
      arrange(desc(log_pvalue)) %>%
      slice_head(n = input$top_n)
  })
  
  output$dot_plot <- renderPlot({
    req(plot_data())
    ggplot(plot_data(), aes(x = log_pvalue, y = reorder(parameter_name, log_pvalue), 
                            color = log_pvalue, size = log_pvalue)) +
      geom_point(alpha = 0.7) +  # 点图
      scale_color_gradient(low = "blue", high = "pink", name = "-log10(P-Value)") +
      theme_minimal() +
      labs(title = paste("Top", input$top_n, "Significant Phenotypes for", input$gene_id),
           x = "-log10(P-Value)", y = "Phenotype (Parameter Name)") +
      theme(axis.text.x = element_text(size = 12),
            axis.text.y = element_text(size = 10),
            legend.position = "right")
  })
  
  # 第二个标签页逻辑：柱状图
  output$bar_plot <- renderPlot({
    filtered_data <- data_final %>%
      filter(
        gene_symbol == input$gene_symbol,
        mouse_life_stage == input$mouse_life_stage,
        mouse_strain == input$mouse_strain
      ) %>%
      mutate(lgpvalue = -log10(pvalue)) %>% # 计算 -log10(pvalue)
      arrange(desc(lgpvalue)) # 按 lgpvalue 降序排序
    
    if (input$display_mode == "top_n") {
      filtered_data <- head(filtered_data, input$top_n_bar)
    }
    
    if (nrow(filtered_data) == 0) {
      plot.new()
      text(0.5, 0.5, "No matching data found. Please adjust the filter criteria.", cex = 1.5)
    } else {
      ggplot(filtered_data, aes(x = reorder(analysis_id, -lgpvalue), y = lgpvalue)) +
        geom_bar(stat = "identity", fill = "steelblue") +
        theme_minimal() +
        labs(x = "Analysis ID", y = "-log10(P-value)", 
             title = paste("P-value Distribution for Gene", input$gene_symbol)) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
    }
  })
  
  # 第三个标签页逻辑：DBSCAN 聚类
  observeEvent(input$run_cluster, {
    req(input$file1)  # 确保文件已上传
    
    data2 <- read_csv(input$file1$datapath)
    
    if (!"phenodigm_score" %in% colnames(data2)) {
      showModal(modalDialog(
        title = "Error",
        "Data must contain a column named 'phenodigm_score'.",
        easyClose = TRUE
      ))
      return(NULL)
    }
    
    scores <- data2$phenodigm_score
    
    dbscan_result <- dbscan(as.matrix(scores), eps = input$eps, minPts = input$minPts)
    data2$cluster <- factor(dbscan_result$cluster)
    
    output$cluster_plot <- renderPlotly({
      plot_ly(data2, x = ~disease_term, y = ~phenodigm_score, type = 'scatter', mode = 'markers', 
              color = ~cluster, colors = "Set1") %>%
        layout(title = "DBSCAN Clustering of Phenodigm Scores",
               xaxis = list(title = "Disease Term", tickangle = 90), 
               yaxis = list(title = "Phenodigm Score"))
    })
    
    output$cluster_table <- renderTable({
      data2[, c("disease_term", "phenodigm_score", "cluster")]
    })
  })
}



```

```{r}
# 启动应用
shinyApp(ui = ui, server = server)
```

